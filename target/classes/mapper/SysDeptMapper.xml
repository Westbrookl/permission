<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jhc.dao.SysDeptMapper" >
  <resultMap id="BaseResultMap" type="com.jhc.model.SysDept" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="VARCHAR" />
    <result column="seq" property="seq" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="INTEGER" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP" />
    <result column="operate_ip" property="operateIp" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, level, seq, remark, parent_id, operator, operate_time, operate_ip
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sys_dept
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sys_dept
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.jhc.model.SysDept" >
    insert into sys_dept (id, name, level, 
      seq, remark, parent_id, 
      operator, operate_time, operate_ip
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{level,jdbcType=VARCHAR}, 
      #{seq,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, 
      #{operator,jdbcType=VARCHAR}, #{operateTime,jdbcType=TIMESTAMP}, #{operateIp,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jhc.model.SysDept" >
    insert into sys_dept
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="seq != null" >
        seq,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="parentId != null" >
        parent_id,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="operateTime != null" >
        operate_time,
      </if>
      <if test="operateIp != null" >
        operate_ip,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=VARCHAR},
      </if>
      <if test="seq != null" >
        #{seq,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null" >
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateIp != null" >
        #{operateIp,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jhc.model.SysDept" >
    update sys_dept
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=VARCHAR},
      </if>
      <if test="seq != null" >
        seq = #{seq,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null" >
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        operate_time = #{operateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="operateIp != null" >
        operate_ip = #{operateIp,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jhc.model.SysDept" >
    update sys_dept
    set name = #{name,jdbcType=VARCHAR},
      level = #{level,jdbcType=VARCHAR},
      seq = #{seq,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=INTEGER},
      operator = #{operator,jdbcType=VARCHAR},
      operate_time = #{operateTime,jdbcType=TIMESTAMP},
      operate_ip = #{operateIp,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!--筛选出内部名称并且parentId相同 且id不相同的部门的数目，这里有一个值得注意的地方就是parameterType = "map"-->
  <!--对于DAO中需要传入多个参数来说的话，每一个c参数都需要加上一个@Param-->
  <select id="countByNameAndParentId" parameterType="map" resultType="int">
    SELECT count(1)
    FROM sys_dept
    WHERE name = #{name}
    <if test="parentId != null">
      AND parent_id = #{parentId}
    </if>
    <if test="id != null">
      AND id != #{id}
    </if>
  </select>
  <!--值得注意的是 mybatis返回一个对象和mybaits返回多个对象的时候SQL的语句是一样的，说明对多个对象的封装是Mybatis的自动配置-->
  <select id="getAllDept" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM sys_dept
  </select>
  <!--对于level的模糊查询-->
  <select id="getChildDeptListByLevel"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_dept
    WHERE level like ${level} || '.%'
  </select>
  <!--批量改变-->
  <update id="batchUpdateLevel" parameterType="map">
    <foreach collection="sysDeptList" item="dept" separator=";">
      UPDATE sys_dept
      SET level = #{dept.level}
      WHERE id = #{dept.id}
    </foreach>
  </update>

  <select id="countByParentId" parameterType="map" resultType="int">
    SELECT count(1)
    FROM sys_dept
    WHERE parent_id = #{deptId}
  </select>
</mapper>